package normalizer;

import interfaces.INormalizer;
import testdatagen.structuregen.ChangedTokens;

/**
 * Normalize format of static solution generated by symbolic execution
 *
 * @author ducanhnguyen
 */
public class StaticSolutionNormalizer extends AbstractSolutionNormalizer {

    @Override
    public void normalize() {
        if (originalSourcecode != null && tokens != null)
            normalizeSourcecode = this.normalize(originalSourcecode, tokens);
        else
            normalizeSourcecode = INormalizer.ERROR;
    }

    /**
     * The format of the static solution is defined before by us. In this step,
     * we normalize the static solution into readable format
     *
     * @param originalStaticSolution
     * @param changedTokens
     * @return
     */
    private String normalize(String originalStaticSolution, ChangedTokens changedTokens) {
        String normalizedStaticSolution = originalStaticSolution;
        if (changedTokens.size() > 0) {
            /*
			 * Ex: "a_123_" -----> "a[123]."
			 */
            normalizedStaticSolution = normalizedStaticSolution.replaceAll(
                    ClassvsStructNormalizer.DELIMITER + "([0-9]+)" + ClassvsStructNormalizer.DELIMITER, "[$1].");
			/*
			 * Ex: "a_123=" ----> "a[123]="
			 */
            normalizedStaticSolution = normalizedStaticSolution
                    .replaceAll(ClassvsStructNormalizer.DELIMITER + "([0-9]+)=", "[$1]=");
			/*
			 * Ex: "_abc_=" ----> ".abc_"
			 */
            normalizedStaticSolution = normalizedStaticSolution
                    .replaceAll(ClassvsStructNormalizer.DELIMITER + "([a-zA-Z0-9_])", ".$1");
        }
        normalizedStaticSolution = normalizedStaticSolution.replaceAll("->", ".");
        return normalizedStaticSolution;
    }
}
