package testdatagen.se;

import testdatagen.se.memory.VariableNodeTable;

/**
 * Represent path constraints generated by symbolic execution for a test path.
 * The path constraint are then solved in SMT-Solver such as Z3
 *
 * @author ducanhnguyen
 */
public interface IPathConstraints {

	/**
	 * Normalize constraint to make it parse easier. Ex: we have constraint
	 * *(P2)>0". We may normalize it into "P2[0]>0".
	 *
	 * @param constraint
	 * @return the normalized constraint
	 */
	String normalizeConstraint(String constraint);

	/**
	 * Get all constraints type "xxx!=NULL"
	 *
	 * @return
	 */
	PathConstraints getNormalConstraints();

	/**
	 * Get all constraints type "xxx==NULL", or "xxx!=NULL" *
	 *
	 * @return
	 */
	PathConstraints getNullorNotNullConstraints();

	/**
	 * @return true if the test path is always no solution
	 */
	boolean isAlwaysFalse();

	int getNumofConditions();

	String getElementAt(int pos);

	IPathConstraints negateTheLastCondition();

	IPathConstraints negateConditionAt(int endIndex);

	VariableNodeTable getVariablesTableNode();

	void setVariablesTableNode(VariableNodeTable tables);

	int getNumOfPCcreatedFromDecision();

	int size();
}